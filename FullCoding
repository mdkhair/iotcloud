#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// Replace with your Wi-Fi credentials
const char* ssid = "5G_CPE_UTM";
const char* password = "123456789";

// MQTT broker details
const char* mqttServer = "broker.hivemq.com";
const int mqttPort = 1883;

// Define your DHT sensor type and pin
#define DHTPIN D2 // Use the appropriate pin where your DHT11 is connected
#define DHTTYPE DHT11

// Define Ultrasonic sensor pins
#define TRIG_PIN D5
#define ECHO_PIN D6

// Define LED pins
#define LED1 D0
#define LED2 D1
#define LED3 D3
#define LED4 D7
#define LED5 D8

WiFiClient espClient;
PubSubClient client(espClient);
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(115200);
  
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Set up MQTT client
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);

  dht.begin();
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Set up LED pins
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(LED4, OUTPUT);
  pinMode(LED5, OUTPUT);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }

  client.loop();

  // Read data from DHT11
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  // Read distance from Ultrasonic sensor
  int distance = measureDistance();

  if (!isnan(temperature) && !isnan(humidity)) {
    String payload = "{\"temperature\":" + String(temperature) + ",\"humidity\":" + String(humidity) + ",\"distance\":" + String(distance) + "}";
    char charArray[payload.length() + 1];
    payload.toCharArray(charArray, payload.length() + 1);

    // Publish data to MQTT topic
    client.publish("mydht11", charArray);
  }

  delay(500); // Adjust the delay to publish data at your desired interval
}

void callback(char* topic, byte* payload, unsigned int length) {
  String receivedTopic = topic;
  String receivedPayload = "";

  for (int i = 0; i < length; i++) {
    receivedPayload += (char)payload[i];
  }

  Serial.print("Received message on topic: ");
  Serial.println(receivedTopic);
  Serial.print("Message: ");
  Serial.println(receivedPayload);

  // Check the received topic and control LEDs accordingly
  if (receivedTopic == "led/control/1") {
    controlLED(LED1, receivedPayload);
  } else if (receivedTopic == "led/control/2") {
    controlLED(LED2, receivedPayload);
  } else if (receivedTopic == "led/control/3") {
    controlLED(LED3, receivedPayload);
  } else if (receivedTopic == "led/control/4") {
    controlLED(LED4, receivedPayload);
  } else if (receivedTopic == "led/control/5") {
    controlLED(LED5, receivedPayload);
  }
}

void controlLED(int pin, String payload) {
  if (payload == "on") {
    digitalWrite(pin, HIGH);
  } else if (payload == "off") {
    digitalWrite(pin, LOW);
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.println("Attempting MQTT connection...");
    if (client.connect("ESP8266Client")) {
      Serial.println("Connected to MQTT broker");

      // Subscribe to LED control topics
      client.subscribe("led/control/1");
      client.subscribe("led/control/2");
      client.subscribe("led/control/3");
      client.subscribe("led/control/4");
      client.subscribe("led/control/5");
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" Try again in 1000 seconds");
      delay(1000);
    }
  }
}

int measureDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  return pulseIn(ECHO_PIN, HIGH) * 0.034 / 2;
}
