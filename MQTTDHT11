#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>
#include <Ultrasonic.h>

// Replace with your WiFi credentials
const char* ssid = "your-ssid";
const char* password = "your-password";

// Replace with your MQTT broker details
const char* mqttServer = "mqtt-server";
const int mqttPort = 1883;
const char* mqttUser = "mqtt-username";
const char* mqttPassword = "mqtt-password";

// Replace with your DHT and Ultrasonic sensor pins
#define DHTPIN D2
#define TRIG_PIN D5
#define ECHO_PIN D6

// Uncomment the type of sensor you're using
//#define DHTTYPE DHT11   // DHT 11
#define DHTTYPE DHT22   // DHT 22 (AM2302), AM2321
//#define DHTTYPE DHT21   // DHT 21 (AM2301)

DHT dht(DHTPIN, DHTTYPE);
Ultrasonic ultrasonic(TRIG_PIN, ECHO_PIN);

WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(250);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("WiFi connected");

  // Connect to MQTT
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);

  // Start DHT sensor
  dht.begin();
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }

  client.loop();

  // Read temperature as Celsius (the default)
  float temperature = dht.readTemperature();
  // Read humidity
  float humidity = dht.readHumidity();

  // Read distance from Ultrasonic sensor
  int distance = ultrasonic.read();

  // Check if any reads failed and exit early (to try again).
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Print sensor readings to serial monitor
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print(" Â°C, Humidity: ");
  Serial.print(humidity);
  Serial.print(" %, Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // Publish data to MQTT topics
  publishData(temperature, humidity, distance);

  // Wait before taking the next reading
  delay(5000);
}

void callback(char* topic, byte* payload, unsigned int length) {
  // Handle incoming MQTT messages
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");

    // Attempt to connect
    if (client.connect("ESP8266Client", mqttUser, mqttPassword)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");

      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void publishData(float temperature, float humidity, int distance) {
  String temperatureString = String(temperature, 2);
  String humidityString = String(humidity, 2);
  String distanceString = String(distance);

  // Publish temperature
  client.publish("your_topic/temperature", temperatureString.c_str());
  // Publish humidity
  client.publish("your_topic/humidity", humidityString.c_str());
  // Publish distance
  client.publish("your_topic/distance", distanceString.c_str());
}
