#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Replace these with your WiFi credentials and MQTT broker details
const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
const char* mqtt_server = "your_MQTT_broker_IP";

const char* topic = "ledControl";
const int ledPin = D2; // Change this to the GPIO pin where your LED is connected

WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  pinMode(ledPin, OUTPUT);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Connect to MQTT broker
  client.setServer(mqtt_server, 1883);
}

void callback(char* topic, byte* payload, unsigned int length) {
  // Convert the payload to a string
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  Serial.print("Received message on topic '");
  Serial.print(topic);
  Serial.print("': ");
  Serial.println(message);

  // Check if the message is "ON" or "OFF" and control the LED accordingly
  if (message.equals("ON")) {
    digitalWrite(ledPin, HIGH);
  } else if (message.equals("OFF")) {
    digitalWrite(ledPin, LOW);
  }
}

void reconnect() {
  // Loop until we're reconnected to the MQTT broker
  while (!client.connected()) {
    Serial.println("Attempting MQTT connection...");
    if (client.connect("ESP8266Client")) {
      Serial.println("Connected to MQTT broker");
      // Subscribe to the topic
      client.subscribe(topic);
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void loop() {
  // Reconnect if necessary
  if (!client.connected()) {
    reconnect();
  }

  // Keep the MQTT connection alive
  client.loop();
}
